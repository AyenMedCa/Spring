services:
  # Servicio de la API Producto
  api-producto:
    build:
      context: ./producto  # El directorio donde est치 el Dockerfile
      dockerfile: Dockerfile  # Nombre del archivo Dockerfile
    container_name: api-producto
    ports:
      - "8080:8081"  # Mapea el puerto 8080 del contenedor al puerto 8080 del host
    environment:
      - SPRING_APPLICATION_NAME=producto
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql-db-producto:3306/productodb
      - SPRING_DATASOURCE_USERNAME=root
      - SPRING_DATASOURCE_PASSWORD=root
      - SERVER_PORT=8080
      - SPRING_JPA_HIBERNATE_DDL_AUTO=update
      - SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT=org.hibernate.dialect.MySQLDialect
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://discovery-service:8787/eureka/
      - KEYCLOAK_ISSUER_URI=http://keycloak-container-spring:8080/realms/spring-keycloak-realm
    depends_on:
      discovery-service:
        condition: service_started
      mysql-db-producto:
        condition: service_healthy
    networks:
      - java-network
    volumes:
      - java_logs:/app/logs  # Volumen para almacenar logs de la aplicaci칩n (opcional)
  # Servicio de la API Orden
  api-orden:
    build:
      context: ./orden  # El directorio donde est치 el Dockerfile
      dockerfile: Dockerfile  # Nombre del archivo Dockerfile
    container_name: api-orden
    ports:
      - "8081:8082"  # Mapea el puerto 8080 del contenedor al puerto 8081 del host
    environment:
      - SPRING_APPLICATION_NAME=orden
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql-db-orden:3306/orden_db
      - SERVER_PORT=8081
      - SPRING_DATASOURCE_USERNAME=root
      - SPRING_DATASOURCE_PASSWORD=root
      - SPRING_JPA_HIBERNATE_DDL_AUTO=update
      - SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT=org.hibernate.dialect.MySQLDialect
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://discovery-service:8787/eureka/
      - KEYCLOAK_ISSUER_URI=http://keycloak-container-spring:8080/realms/spring-keycloak-realm
    depends_on:
      discovery-service:
        condition: service_started
      mysql-db-orden:
        condition: service_healthy
    networks:
      - java-network
    volumes:
      - java_logs:/app/logs
  mysql-db-producto:
    image: mysql:8.0
    container_name: mysql-db-producto
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: productodb
    ports:
      - "3309:3306"
    volumes:
      - mysql_data_producto:/var/lib/mysql
    networks:
      - java-network
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]
      interval: 10s
      timeout: 5s
      retries: 5
  mysql-db-orden:
    image: mysql:8.0
    container_name: mysql-db-orden
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: orden_db
    ports:
      - "3310:3306"
    volumes:
      - mysql_data_orden:/var/lib/mysql
    networks:
      - java-network
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]
      interval: 10s
      timeout: 5s
      retries: 5
  #Contenedor del discovery service
  discovery-service:
    build:
      context: ./discoveryservice
      dockerfile: Dockerfile
    container_name: discovery-service
    ports:
      - "8787:8787"
    environment:
      - SPRING_APPLICATION_NAME=discoveryservice
      - SERVER_PORT=8787
      - EUREKA_CLIENT_REGISTER_WITH_EUREKA=false
      - EUREKA_CLIENT_FETCH_REGISTRY=false
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://discovery-service:8787/eureka/
    networks:
      - java-network
  gateway:
    build:
      context: ./gateway
      dockerfile: Dockerfile
    container_name: gateway
    ports:
      - "8383:8383"
    environment:
      - SPRING_APPLICATION_NAME=gateway
      - SERVER_PORT=8383
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://discovery-service:8787/eureka/
      - SPRING_MESSAGES_ENCODING=UTF-8
    depends_on:
      - discovery-service
    networks:
      - java-network
  keycloak-mysql:
    container_name: keycloak-mysql-container-spring
    image: mysql:latest
    volumes:
      - ./volume-data/mysql_keycloak_data:/var/lib/mysql
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: keycloak
      MYSQL_USER: keycloak
      MYSQL_PASSWORD: password
  keycloak:
    container_name: keycloak-container-spring
    image: quay.io/keycloak/keycloak:24.0.1
    command: [ "start-dev", "--import-realm" ]
    environment:
      DB_VENDOR: MYSQL
      DB_ADDR: keycloak-mysql
      DB_DATABASE: keycloak
      DB_USER: keycloak
      DB_PASSWORD: password
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
    ports:
      - "8181:8080"
    volumes:
      - ./docker/keycloak/realms/:/opt/keycloak/data/import/
    depends_on:
      - keycloak-mysql
    networks:
      - java-network
volumes:
  mysql_data_producto:  # Volumen persistente para los datos de MySQL para el producto
  mysql_data_orden:     # Volumen persistente para los datos de MySQL para la orden
  mysql_data_users:     # Volumen persistente para los datos de MySQL para los usuarios
  keycloak_data:
  java_logs:
  # Volumen opcional para logs de la aplicaci칩n Java
networks:
  java-network:
    driver: bridge
